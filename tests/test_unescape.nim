import ../src/htmlunescape

# check text with no character references
doAssert unescape(s = "no character references") == "no character references"

# check & followed by invalid chars
doAssert unescape(s = "&\n&\t& &&") == "&\n&\t& &&"

# check & followed by numbers and letters
doAssert unescape(s = "&0 &9 &a &0; &9; &a;") == "&0 &9 &a &0; &9; &a;"

# check incomplete entities at the end of the string
doAssert unescape(s = "&") == "&"
doAssert unescape(s = "&;") == "&;"
doAssert unescape(s = "&#") == "&#"
doAssert unescape(s = "&#;") == "&#;"
doAssert unescape(s = "&#x") == "&#x"
doAssert unescape(s = "&#x;") == "&#x;"
doAssert unescape(s = "&#X") == "&#X"
doAssert unescape(s = "&#X;") == "&#X;"
doAssert unescape(s = "&#y") == "&#y"
doAssert unescape(s = "&#y;") == "&#y;"
doAssert unescape(s = "&#xy") == "&#xy"
doAssert unescape(s = "&#xy;") == "&#xy;"
doAssert unescape(s = "&#Xy") == "&#Xy"
doAssert unescape(s = "&#Xy;") == "&#Xy;"

# check several combinations of numeric character references,
# possibly followed by different characters
doAssert unescape(s = "&#65") == "A"
doAssert unescape(s = "&#65 ") == "A "
doAssert unescape(s = "&#65X") == "AX"
doAssert unescape(s = "&#0000065") == "A"
doAssert unescape(s = "&#0000065 ") == "A "
doAssert unescape(s = "&#0000065X") == "AX"
doAssert unescape(s = "&#65;") == "A"
doAssert unescape(s = "&#65; ") == "A "
doAssert unescape(s = "&#65;X") == "AX"
doAssert unescape(s = "&#0000065;") == "A"
doAssert unescape(s = "&#0000065; ") == "A "
doAssert unescape(s = "&#0000065;X") == "AX"
doAssert unescape(s = "&#x41") == "A"
doAssert unescape(s = "&#x41 ") == "A "
doAssert unescape(s = "&#x41X") == "AX"
doAssert unescape(s = "&#x000041") == "A"
doAssert unescape(s = "&#x000041 ") == "A "
doAssert unescape(s = "&#x000041X") == "AX"
doAssert unescape(s = "&#x41;") == "A"
doAssert unescape(s = "&#x41; ") == "A "
doAssert unescape(s = "&#x41;X") == "AX"
doAssert unescape(s = "&#x000041;") == "A"
doAssert unescape(s = "&#x000041; ") == "A "
doAssert unescape(s = "&#x000041;X") == "AX"
doAssert unescape(s = "&#x41") == "A"
doAssert unescape(s = "&#x41 ") == "A "
doAssert unescape(s = "&#x41X") == "AX"
doAssert unescape(s = "&#x000041") == "A"
doAssert unescape(s = "&#x000041 ") == "A "
doAssert unescape(s = "&#x000041X") == "AX"
doAssert unescape(s = "&#X41;") == "A"
doAssert unescape(s = "&#X41; ") == "A "
doAssert unescape(s = "&#X41;X") == "AX"
doAssert unescape(s = "&#X000041;") == "A"
doAssert unescape(s = "&#X000041; ") == "A "
doAssert unescape(s = "&#X000041;X") == "AX"
doAssert unescape(s = "&#97") == "a"
doAssert unescape(s = "&#97 ") == "a "
doAssert unescape(s = "&#97X") == "aX"
doAssert unescape(s = "&#0000097") == "a"
doAssert unescape(s = "&#0000097 ") == "a "
doAssert unescape(s = "&#0000097X") == "aX"
doAssert unescape(s = "&#97;") == "a"
doAssert unescape(s = "&#97; ") == "a "
doAssert unescape(s = "&#97;X") == "aX"
doAssert unescape(s = "&#0000097;") == "a"
doAssert unescape(s = "&#0000097; ") == "a "
doAssert unescape(s = "&#0000097;X") == "aX"
doAssert unescape(s = "&#x61") == "a"
doAssert unescape(s = "&#x61 ") == "a "
doAssert unescape(s = "&#x61X") == "aX"
doAssert unescape(s = "&#x000061") == "a"
doAssert unescape(s = "&#x000061 ") == "a "
doAssert unescape(s = "&#x000061X") == "aX"
doAssert unescape(s = "&#x61;") == "a"
doAssert unescape(s = "&#x61; ") == "a "
doAssert unescape(s = "&#x61;X") == "aX"
doAssert unescape(s = "&#x000061;") == "a"
doAssert unescape(s = "&#x000061; ") == "a "
doAssert unescape(s = "&#x000061;X") == "aX"
doAssert unescape(s = "&#x61") == "a"
doAssert unescape(s = "&#x61 ") == "a "
doAssert unescape(s = "&#x61X") == "aX"
doAssert unescape(s = "&#x000061") == "a"
doAssert unescape(s = "&#x000061 ") == "a "
doAssert unescape(s = "&#x000061X") == "aX"
doAssert unescape(s = "&#X61;") == "a"
doAssert unescape(s = "&#X61; ") == "a "
doAssert unescape(s = "&#X61;X") == "aX"
doAssert unescape(s = "&#X000061;") == "a"
doAssert unescape(s = "&#X000061; ") == "a "
doAssert unescape(s = "&#X000061;X") == "aX"
doAssert unescape(s = "&#34") == "\""
doAssert unescape(s = "&#34 ") == "\" "
doAssert unescape(s = "&#34X") == "\"X"
doAssert unescape(s = "&#0000034") == "\""
doAssert unescape(s = "&#0000034 ") == "\" "
doAssert unescape(s = "&#0000034X") == "\"X"
doAssert unescape(s = "&#34;") == "\""
doAssert unescape(s = "&#34; ") == "\" "
doAssert unescape(s = "&#34;X") == "\"X"
doAssert unescape(s = "&#0000034;") == "\""
doAssert unescape(s = "&#0000034; ") == "\" "
doAssert unescape(s = "&#0000034;X") == "\"X"
doAssert unescape(s = "&#x22") == "\""
doAssert unescape(s = "&#x22 ") == "\" "
doAssert unescape(s = "&#x22X") == "\"X"
doAssert unescape(s = "&#x000022") == "\""
doAssert unescape(s = "&#x000022 ") == "\" "
doAssert unescape(s = "&#x000022X") == "\"X"
doAssert unescape(s = "&#x22;") == "\""
doAssert unescape(s = "&#x22; ") == "\" "
doAssert unescape(s = "&#x22;X") == "\"X"
doAssert unescape(s = "&#x000022;") == "\""
doAssert unescape(s = "&#x000022; ") == "\" "
doAssert unescape(s = "&#x000022;X") == "\"X"
doAssert unescape(s = "&#x22") == "\""
doAssert unescape(s = "&#x22 ") == "\" "
doAssert unescape(s = "&#x22X") == "\"X"
doAssert unescape(s = "&#x000022") == "\""
doAssert unescape(s = "&#x000022 ") == "\" "
doAssert unescape(s = "&#x000022X") == "\"X"
doAssert unescape(s = "&#X22;") == "\""
doAssert unescape(s = "&#X22; ") == "\" "
doAssert unescape(s = "&#X22;X") == "\"X"
doAssert unescape(s = "&#X000022;") == "\""
doAssert unescape(s = "&#X000022; ") == "\" "
doAssert unescape(s = "&#X000022;X") == "\"X"
doAssert unescape(s = "&#38") == "&"
doAssert unescape(s = "&#38 ") == "& "
doAssert unescape(s = "&#38X") == "&X"
doAssert unescape(s = "&#0000038") == "&"
doAssert unescape(s = "&#0000038 ") == "& "
doAssert unescape(s = "&#0000038X") == "&X"
doAssert unescape(s = "&#38;") == "&"
doAssert unescape(s = "&#38; ") == "& "
doAssert unescape(s = "&#38;X") == "&X"
doAssert unescape(s = "&#0000038;") == "&"
doAssert unescape(s = "&#0000038; ") == "& "
doAssert unescape(s = "&#0000038;X") == "&X"
doAssert unescape(s = "&#x26") == "&"
doAssert unescape(s = "&#x26 ") == "& "
doAssert unescape(s = "&#x26X") == "&X"
doAssert unescape(s = "&#x000026") == "&"
doAssert unescape(s = "&#x000026 ") == "& "
doAssert unescape(s = "&#x000026X") == "&X"
doAssert unescape(s = "&#x26;") == "&"
doAssert unescape(s = "&#x26; ") == "& "
doAssert unescape(s = "&#x26;X") == "&X"
doAssert unescape(s = "&#x000026;") == "&"
doAssert unescape(s = "&#x000026; ") == "& "
doAssert unescape(s = "&#x000026;X") == "&X"
doAssert unescape(s = "&#x26") == "&"
doAssert unescape(s = "&#x26 ") == "& "
doAssert unescape(s = "&#x26X") == "&X"
doAssert unescape(s = "&#x000026") == "&"
doAssert unescape(s = "&#x000026 ") == "& "
doAssert unescape(s = "&#x000026X") == "&X"
doAssert unescape(s = "&#X26;") == "&"
doAssert unescape(s = "&#X26; ") == "& "
doAssert unescape(s = "&#X26;X") == "&X"
doAssert unescape(s = "&#X000026;") == "&"
doAssert unescape(s = "&#X000026; ") == "& "
doAssert unescape(s = "&#X000026;X") == "&X"
doAssert unescape(s = "&#9731") == "☃"
doAssert unescape(s = "&#9731 ") == "☃ "
doAssert unescape(s = "&#9731X") == "☃X"
doAssert unescape(s = "&#0009731") == "☃"
doAssert unescape(s = "&#0009731 ") == "☃ "
doAssert unescape(s = "&#0009731X") == "☃X"
doAssert unescape(s = "&#9731;") == "☃"
doAssert unescape(s = "&#9731; ") == "☃ "
doAssert unescape(s = "&#9731;X") == "☃X"
doAssert unescape(s = "&#0009731;") == "☃"
doAssert unescape(s = "&#0009731; ") == "☃ "
doAssert unescape(s = "&#0009731;X") == "☃X"
doAssert unescape(s = "&#x2603") == "☃"
doAssert unescape(s = "&#x2603 ") == "☃ "
doAssert unescape(s = "&#x2603X") == "☃X"
doAssert unescape(s = "&#x002603") == "☃"
doAssert unescape(s = "&#x002603 ") == "☃ "
doAssert unescape(s = "&#x002603X") == "☃X"
doAssert unescape(s = "&#x2603;") == "☃"
doAssert unescape(s = "&#x2603; ") == "☃ "
doAssert unescape(s = "&#x2603;X") == "☃X"
doAssert unescape(s = "&#x002603;") == "☃"
doAssert unescape(s = "&#x002603; ") == "☃ "
doAssert unescape(s = "&#x002603;X") == "☃X"
doAssert unescape(s = "&#x2603") == "☃"
doAssert unescape(s = "&#x2603 ") == "☃ "
doAssert unescape(s = "&#x2603X") == "☃X"
doAssert unescape(s = "&#x002603") == "☃"
doAssert unescape(s = "&#x002603 ") == "☃ "
doAssert unescape(s = "&#x002603X") == "☃X"
doAssert unescape(s = "&#X2603;") == "☃"
doAssert unescape(s = "&#X2603; ") == "☃ "
doAssert unescape(s = "&#X2603;X") == "☃X"
doAssert unescape(s = "&#X002603;") == "☃"
doAssert unescape(s = "&#X002603; ") == "☃ "
doAssert unescape(s = "&#X002603;X") == "☃X"
doAssert unescape(s = "&#1053236") == "􁈴"
doAssert unescape(s = "&#1053236 ") == "􁈴 "
doAssert unescape(s = "&#1053236X") == "􁈴X"
doAssert unescape(s = "&#1053236") == "􁈴"
doAssert unescape(s = "&#1053236 ") == "􁈴 "
doAssert unescape(s = "&#1053236X") == "􁈴X"
doAssert unescape(s = "&#1053236;") == "􁈴"
doAssert unescape(s = "&#1053236; ") == "􁈴 "
doAssert unescape(s = "&#1053236;X") == "􁈴X"
doAssert unescape(s = "&#1053236;") == "􁈴"
doAssert unescape(s = "&#1053236; ") == "􁈴 "
doAssert unescape(s = "&#1053236;X") == "􁈴X"
doAssert unescape(s = "&#x101234") == "􁈴"
doAssert unescape(s = "&#x101234 ") == "􁈴 "
doAssert unescape(s = "&#x101234X") == "􁈴X"
doAssert unescape(s = "&#x101234") == "􁈴"
doAssert unescape(s = "&#x101234 ") == "􁈴 "
doAssert unescape(s = "&#x101234X") == "􁈴X"
doAssert unescape(s = "&#x101234;") == "􁈴"
doAssert unescape(s = "&#x101234; ") == "􁈴 "
doAssert unescape(s = "&#x101234;X") == "􁈴X"
doAssert unescape(s = "&#x101234;") == "􁈴"
doAssert unescape(s = "&#x101234; ") == "􁈴 "
doAssert unescape(s = "&#x101234;X") == "􁈴X"
doAssert unescape(s = "&#x101234") == "􁈴"
doAssert unescape(s = "&#x101234 ") == "􁈴 "
doAssert unescape(s = "&#x101234X") == "􁈴X"
doAssert unescape(s = "&#x101234") == "􁈴"
doAssert unescape(s = "&#x101234 ") == "􁈴 "
doAssert unescape(s = "&#x101234X") == "􁈴X"
doAssert unescape(s = "&#X101234;") == "􁈴"
doAssert unescape(s = "&#X101234; ") == "􁈴 "
doAssert unescape(s = "&#X101234;X") == "􁈴X"
doAssert unescape(s = "&#X101234;") == "􁈴"
doAssert unescape(s = "&#X101234; ") == "􁈴 "
doAssert unescape(s = "&#X101234;X") == "􁈴X"

# check invalid code points
doAssert unescape(s = "&#55296") == "�"
doAssert unescape(s = "&#55296;") == "�"
doAssert unescape(s = "&#xd800") == "�"
doAssert unescape(s = "&#xd800;") == "�"
doAssert unescape(s = "&#56064") == "�"
doAssert unescape(s = "&#56064;") == "�"
doAssert unescape(s = "&#xdb00") == "�"
doAssert unescape(s = "&#xdb00;") == "�"
doAssert unescape(s = "&#56320") == "�"
doAssert unescape(s = "&#56320;") == "�"
doAssert unescape(s = "&#xdc00") == "�"
doAssert unescape(s = "&#xdc00;") == "�"
doAssert unescape(s = "&#57343") == "�"
doAssert unescape(s = "&#57343;") == "�"
doAssert unescape(s = "&#xdfff") == "�"
doAssert unescape(s = "&#xdfff;") == "�"
doAssert unescape(s = "&#1114112") == "�"
doAssert unescape(s = "&#1114112;") == "�"
doAssert unescape(s = "&#x110000") == "�"
doAssert unescape(s = "&#x110000;") == "�"

# check more invalid code points
doAssert unescape(s = "&#1") == ""
doAssert unescape(s = "&#1;") == ""
doAssert unescape(s = "&#x1") == ""
doAssert unescape(s = "&#x1;") == ""
doAssert unescape(s = "&#11") == ""
doAssert unescape(s = "&#11;") == ""
doAssert unescape(s = "&#xb") == ""
doAssert unescape(s = "&#xb;") == ""
doAssert unescape(s = "&#14") == ""
doAssert unescape(s = "&#14;") == ""
doAssert unescape(s = "&#xe") == ""
doAssert unescape(s = "&#xe;") == ""
doAssert unescape(s = "&#127") == ""
doAssert unescape(s = "&#127;") == ""
doAssert unescape(s = "&#x7f") == ""
doAssert unescape(s = "&#x7f;") == ""
doAssert unescape(s = "&#65534") == ""
doAssert unescape(s = "&#65534;") == ""
doAssert unescape(s = "&#xfffe") == ""
doAssert unescape(s = "&#xfffe;") == ""
doAssert unescape(s = "&#65535") == ""
doAssert unescape(s = "&#65535;") == ""
doAssert unescape(s = "&#xffff") == ""
doAssert unescape(s = "&#xffff;") == ""
doAssert unescape(s = "&#1114110") == ""
doAssert unescape(s = "&#1114110;") == ""
doAssert unescape(s = "&#x10fffe") == ""
doAssert unescape(s = "&#x10fffe;") == ""
doAssert unescape(s = "&#1114111") == ""
doAssert unescape(s = "&#1114111;") == ""
doAssert unescape(s = "&#x10ffff") == ""
doAssert unescape(s = "&#x10ffff;") == ""

# check invalid numbers
doAssert unescape(s = "&#13") == "\r"
doAssert unescape(s = "&#13;") == "\r"
doAssert unescape(s = "&#xd") == "\r"
doAssert unescape(s = "&#xd;") == "\r"
doAssert unescape(s = "&#128") == "€"
doAssert unescape(s = "&#128;") == "€"
doAssert unescape(s = "&#x80") == "€"
doAssert unescape(s = "&#x80;") == "€"
doAssert unescape(s = "&#149") == "•"
doAssert unescape(s = "&#149;") == "•"
doAssert unescape(s = "&#x95") == "•"
doAssert unescape(s = "&#x95;") == "•"
doAssert unescape(s = "&#157") == "\u009d"
doAssert unescape(s = "&#157;") == "\u009d"
doAssert unescape(s = "&#x9d") == "\u009d"
doAssert unescape(s = "&#x9d;") == "\u009d"

# check small numbers
doAssert unescape(s = "&#0") == "�"
doAssert unescape(s = "&#0;") == "�"
doAssert unescape(s = "&#x0") == "�"
doAssert unescape(s = "&#x0;") == "�"
doAssert unescape(s = "&#9") == "\t"
doAssert unescape(s = "&#9;") == "\t"
doAssert unescape(s = "&#x9") == "\t"
doAssert unescape(s = "&#x9;") == "\t"

# check a big number
doAssert unescape(s = "&#1000000000000000000") == "�"
doAssert unescape(s = "&#1000000000000000000;") == "�"
doAssert unescape(s = "&#xde0b6b3a7640000") == "�"
doAssert unescape(s = "&#xde0b6b3a7640000;") == "�"

# check that multiple trailing semicolons are handled correctly
doAssert unescape(s = "&quot;;") == "\";"
doAssert unescape(s = "&#34;;") == "\";"
doAssert unescape(s = "&#x22;;") == "\";"
doAssert unescape(s = "&#X22;;") == "\";"

# check that semicolons in the middle don't create problems
doAssert unescape(s = "&quot;quot;") == "\"quot;"
doAssert unescape(s = "&#34;quot;") == "\"quot;"
doAssert unescape(s = "&#x22;quot;") == "\"quot;"
doAssert unescape(s = "&#X22;quot;") == "\"quot;"

# check triple adjacent charrefs
doAssert unescape(s = "&quot&quot&quot") == "\"\"\""
doAssert unescape(s = "&quot;&quot;&quot;") == "\"\"\""
doAssert unescape(s = "&#34&#34&#34") == "\"\"\""
doAssert unescape(s = "&#34;&#34;&#34;") == "\"\"\""
doAssert unescape(s = "&#x22&#x22&#x22") == "\"\"\""
doAssert unescape(s = "&#x22;&#x22;&#x22;") == "\"\"\""
doAssert unescape(s = "&#X22&#X22&#X22") == "\"\"\""
doAssert unescape(s = "&#X22;&#X22;&#X22;") == "\"\"\""

# check that the case is respected
doAssert unescape(s = "&amp") == "&"
doAssert unescape(s = "&amp;") == "&"
doAssert unescape(s = "&AMP") == "&"
doAssert unescape(s = "&AMP;") == "&"
doAssert unescape(s = "&Amp") == "&Amp"
doAssert unescape(s = "&Amp;") == "&Amp;"

# check that non-existent named entities are returned unchanged
doAssert unescape(s = "&svadilfari;") == "&svadilfari;"

# the following examples are in the html5 specs
doAssert unescape(s = "&notit") == "¬it"
doAssert unescape(s = "&notit;") == "¬it;"
doAssert unescape(s = "&notin") == "¬in"
doAssert unescape(s = "&notin;") == "∉"

# a similar example with a long name
doAssert unescape(s = "&notReallyAnExistingNamedCharacterReference;") == "¬ReallyAnExistingNamedCharacterReference;"

# longest valid name
doAssert unescape(s = "&CounterClockwiseContourIntegral;") == "∳"

# check a charref that maps to two unicode chars
doAssert unescape(s = "&acE;") == "∾̳"
doAssert unescape(s = "&acE") == "&acE"

# see #12888
doAssert unescape(s{ { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { "

# see #15156
doAssert unescape(s = "&Eacuteric&Eacute;ric&alphacentauri&alpha;centauri") == "ÉricÉric&alphacentauriαcentauri"
doAssert unescape(s = "&co;") == "&co;"
